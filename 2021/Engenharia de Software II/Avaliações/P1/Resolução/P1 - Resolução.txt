Nome: Davi Augusto Neves Leite
RA: 191027383

1) O software orientado a objetos e o software tradicional não são antagônicos, mas sim duas visões diferentes que dependem do ambiente de aplicação a ser utilizado.
Enquanto que o software orientado a objetos possui, em sua essência, componentes baseados em classes colaborativas (uso de atributos e métodos), o software tradicional possui seus componentes como sendo elementos funcionais do programa (lógica de processamento e estruturas internas).
Pode-se exemplificar: 
	software para padaria como orientado a objetos - presença de classes como Padeiro, Vendedor, Produtos, Vendas, dentre outros;
	parte do núcleo de um sistema operacional comum (como Linux) - não há presença de classes, mas sim de vários arquivos com cada qual realizando funções lógicas específicas para um todo.

2) Considerando as três regras de ouro, dadas por Theo Mandel: deixar o usuário no comando, reduzir a carga de memória do usuário e tornar a interface consistente; pode-se elencar duas situações, quando relacionado a software, em que existem os chamados trade-offs: utilização excessiva de componentes, em detrimento de desempenho do sistema (consumo de recursos) e, a utilização de um forma de compilação de uma linguagem de programação (se possível).
O primeiro caso pode ser visto no uso da interface GNOME, presente em diversas distribuições Linux. Nesta interface, os diversos componentes são bem localizados e há um controle do usuário com relação a eles; porém, essa interface necessita de, no mínimo, 4GB de memória RAM para ser utilizada devidamente (custo alto se comparado a interface XFCE, com 2GB de RAM).
Já o segundo caso pode ser visto na plataforma Android, especificamente na camada de Android Runtime (ART) do sistema, em que existem dois tipos de compilação que podem ser utilizados: o Ahead-of-Time (AOT) e o Just-in-Time. O AOT compila antes de executar, trazendo o trade-off de ser demorado para instalação e gastar mais espaço de armazenamento ao passo que é rápida a execução da aplicação compilada neste tipo; enquanto que o JIT compila conforme demanda, tendo o trade-off de lentidão durante a execução da aplicação mas gastando muito menos espaço de armazenamento.
Outro trade-off comum visto no ambiente computacional é o da escolha de linguagem de programação na produção do software, em que podem ser levados parâmetros como: se é orientada a objetos; criação de interfaces; consumo de recursos na aplicação; compilada ou interpretada; dentre outros.

3) O projeto arquitetural está relacionado com as estruturas do sistema, ou seja, estabelece a organização dos componentes ("quais usar", por exemplo) de software bem como suas inter/intracomunicações. Ou seja: é nesta etapa em que os componentes são definidos e organizados.
Isso torna-se uma das etapas mais importantes do desenvolvimento exatamente pela possibilidade de prevenção de problemas (e, desta forma, custos extras de material e mão de obra, por exemplo) futuros no desenvolvimento. Em outras palavras, essa etapa garante a redução/isenção de custos desnecessários (material, tempo e mão-de-obra) durante a realização do projeto.
Por exemplo, vamos tomar a construção de uma casa de madeira. A utilização do projeto arquitetural permite a organização adequada de materiais (total de madeiras, tamanho de cada madeira), sem que haja desperdício de material ao fim de realização do projeto. Isso pode ser visto também na mão-de-obra, de tal forma que não seja gasto dinheiro com mão-de-obra desnecessária.
Numa visão de software, isso pode ser facilmente identificado quando visto quais componentes (em termos de quantidade e tipo) utilizar para uma interface visual de usuário (UI), por exemplo. Nesta forma, o projeto arquitetural evitaria custos desnecessários, trazendo a melhor forma de desenvolvimento para aquele software específico.

4) As aplicações Web, de modo geral, estão baseadas em softwares que funcionam à base do "cliente-servidor", ou seja, utilização da internet para a comunicação entre o usuário e o software. Neste formato, qualquer dispositivo pode acessar o software, desde que haja conexão com a internet.
Já as aplicações mobile estão relacionadas aos softwares que são instalados diretamente nos dispositivos, utilizando dos recursos do sistema operacional móvel. Neste formato, o uso de internet é opcional (com alguma abordagem como "cliente-servidor"), importando somente o determinado sistema operacional móvel e dispositivo utilizados.
Pode-se resumir as aplicações Web como sendo "gerais", do ponto de vista de determinado sistema operacional e dispositivo; e as aplicações móveis como sendo "específicas", para os mesmos pontos.
Dessa forma, pode-se elencar alguns pontos em comum: 
	1) Ambas levam em consideração as interfaces de usuário, ou seja, podem utilizar os mesmos componentes de interface (como botões, caixas de texto, tipos de layout, dentre outros)
	2) Ambas possuem mecânicas de navegação, com a utilização de barras, guias e diferentes páginas/atividades.
	3) Ambas podem usar o mesmo padrão de compartilhamento de dados, como cliente-servidor ou MVC (ambos utilizando arquivos JSON ou XML para compartilhamento de dados).
Contudo, pode-se elencar alguns pontos que as diferem: 
	1) as Aplicações Web obrigam o uso de um browser; enquanto que as Aplicações Móveis utilizam o próprio S.O.
	2) as Aplicações Web funcionam em qualquer tipo de dispositivo (a partir de browser e internet); enquanto que as Aplicações Movéis são específicas para determinado dispositivo e sistema operacional (como Android e iOS)
	3) as Aplicações Web, em sua maioria, utilizam de recursos do "cliente-servidor" para fazer a comunicação entre usuário e servidor; enquanto que as Aplicações Móveis, geralmente, utilizam-se do padrão MVC para a comunicação entre o usuário e servidor.

5) As principais dificuldades de um projeto de software utilizar o modelo de projeto do tipo "baseado em padrões" está, em essência, relacionado a identificação dos padrão na aplicação, haja visto que é necessário identificar o contexto do problema e a solução específica para aquele problema.
Isso pode ser visto, por exemplo, na criação de uma interface de busca de usuário: há vários componentes que podem ser utilizados para a realização da pesquisa (botões, caixas de entrada de texto, caixa de pesquisa, banco de dados, dentre outros); o fato de decidir uma solução, ou seja, quais componenetes utilizar neste contexto de busca pode-se estar relacionado a um um padrão (solução para um problema conhecido/repetível de software, como pesquisa de dados).
Seguindo o exemplo anterior, existe um padrão denominado "Search Box" (http://www.welie.com/patterns/showPattern.php?patternID=search) em que pode ser aplicado para resolver o problema de busca de usuário.
Dessa forma, o projeto de software pode ser passível de evitar erros futuramente; mas identificar os padrões não é uma tarefa fácil.

6) O projeto arquitetural está relacionado as estruturas do sistema, ou seja, a organização dos componentes de software bem como suas comunicações. Em outras palavras, a parte arquitetural do projeto demonstra como os componentes devem ser organizados, a fim de permitir três principais fatores (segundo Pressman): analisar a efetivade do projeto com relação aos requisitos advindos do projeto de análise; considerar alternativas em quaisquer um dos estágios de desenvolvimento, possibilitando uma modificação fácil no projeto e; reduriz os riscos associados a produção/construção do software. É neste projeto em que são discutidos a modularização (separar as ações em partes) e a comunicação entre os componentes do sistema (como um todo).
Já o projeto de componentes está relacionado a criar uma descrição procedimental (como uma "receita de bolo") dos componentes abrangidos pelo projeto de arquitetura. Em outras palavras, detalha a respeito de cada componente presente no projeto arquitetural, a fim de se transformar o projeto em software operacional. É neste projeto em que se detalha, minusciosamente, os componentes que estão presentes no projeto de arquitetura, de tal maneira a se detalhar as classes, interfaces, dependências e heranças de cada componente.
Por exemplo: vamos supor um projeto em que se queira produzir um carro. O projeto arquitetural, neste caso, se encarregaria de esboçar todos os componentes e suas inter/intracomunicações, do tipo: utilização de pneus, chassi, motor, embreagem; como conectar pneus com chassi; dentre outros fatores. Já a etada de projeto de componentes, neste exemplo, ficaria encarregada de detalhar os componentes advindos do projeto arquitetural, como: quais as especificações do pneu (tamanho, cor, tipo de borracha), do chassi (tamanho, cor, material); dentre outros.

