Contador de Referências: esse método consiste em associar um contador de referências a um determinado objeto. Ou seja, esse contador irá aumentando conforme o objeto for referenciado. Contudo, quando a contagem chega a 0, significa que esse objeto pode ser liberado da memória por não estar mais em uso.
Uma vantagem desse método está na ocorrência de forma dinâmica com o programa, ou seja, ele irá contar as referências juntamente com a execução do programa e, caso o contador chegue a 0, ele irá limpar aquela área de memória no mesmo instante.
Contudo, possui algumas desvantagens como não ser possível acessar área de memória perdida por algum ponteiro e utiliza um contador interno de referências (gastando uma parte da memória para tal)

Marcar-Varrer: esse método consiste em realizar duas passagens pela memória Heap quando esta fica cheia: a primeira para marcar todos os blocos que podem ser liberados e a segunda para liberar as áreas de memória marcadas na primeira passagem.
Uma vantagem desse método está em conseguir limpar as áreas de memória não acessíveis pelos ponteiros do programa em execução.
Contudo, possui algumas desvantagens como exigir que toda a memória Heap seja percorrida quando cheia (gastando tempo) e ocasiona uma fragmentação da mesma (haja visto que esse método marca e limpa as áreas de memória, mas não realoca em ordem as áreas utilizadas), impossibilitando a instanciação de objetos grandes e de estruturas como vetores e matrizes

Coleta de Cópias: esse método consiste em separar a memória Heap em duas regiões: ativa, a qual ocorrerá a execução dos programas e alocação dos objetos; e inativa, a qual é utilizada como auxiliar. Diante disso, o método consiste em: buscar por objetos alcançáveis (aqueles em que ainda há referências), copiar esses objetos para a região inativa (quando a região ativa ficar cheia) e limpar a "ex região ativa".
Entre outras palavras: quando a região ativa está cheia, ele busca os objetos que ainda estão sendo utilizados, copia eles em ordem para a região inativa e limpa a antiga região ativa. Essa região inativa agora se torna ativa e a antiga região ativa se torna a nova região inativa.
Uma vantagem desse método está no seu funcionamento, em que realiza apenas uma passagem pela memória e ainda proporcionalmente a quantidade de objetos ativos (e não ao tamanho como os outros dois anteriores).
Contudo, a principal desvantagem consiste na redução de espaço para alocação de objetos, haja visto que a memória será divida em duas regiões e apenas uma delas poderá ser utilizada pelo programa.